buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url "https://dl.bintray.com/kotlin/ktor" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.31"
        classpath "org.jetbrains.kotlin:kotlin-serialization:1.3.31"
        classpath("org.jetbrains.kotlin:kotlin-native-gradle-plugin:1.3.31") {
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-gradle-plugin'
        }
        classpath "org.jetbrains.kotlin:kotlin-allopen:1.3.31"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.45"
    }
}

repositories {
    mavenCentral()
    google()
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    mavenLocal()
}
group 'com.lukasdylan.footballnewsmpp'
version '0.0.1'
project.ext.set("archivesBaseName", "footballnews-shared-code")

apply plugin: 'maven-publish'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-multiplatform'
apply from: 'android.gradle'

kotlin {

    def useExperimentalAnnotations = [
            'kotlin.Experimental',
            'kotlin.experimental.ExperimentalTypeInference'
            //'kotlinx.io.core.internal.DangerousInternalIoApi',
            //'kotlinx.io.core.ExperimentalIoApi'
    ]
    def useExperimentalOptionString = "-Xuse-experimental=${useExperimentalAnnotations.join(",")}"

    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('FootballNewsSharedCode')
            }
        }

        fromPreset(presets.android, 'android')
    }
    
    sourceSets {
        all {
            languageSettings.useExperimentalAnnotation(useExperimentalOptionString)
        }
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "io.ktor:ktor-client:1.1.4"
                implementation "io.ktor:ktor-client-json:1.1.4"
                implementation "io.ktor:ktor-client-logging:1.1.4"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1-eap13-125"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.1.1-eap13-125"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.11.0"
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation "io.ktor:ktor-client-json-jvm:1.1.4"
                implementation "io.ktor:ktor-client-logging-jvm:1.1.4"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1-eap13-125"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1-eap13-125"
                implementation "org.jetbrains.kotlin:kotlin-android-extensions-runtime:1.3.31"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.0"
                implementation "androidx.lifecycle:lifecycle-runtime:2.0.0"
                implementation "androidx.lifecycle:lifecycle-extensions:2.0.0"
            }
        }
        iosMain {
            dependencies {
                implementation "io.ktor:ktor-client-logging-native:1.1.4"
                implementation "io.ktor:ktor-client-json-native:1.1.4"
                implementation "io.ktor:ktor-client-ios:1.1.4"
                implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.1.1-eap13-125") {
                    exclude group: "org.jetbrains.kotlinx", module: "atomicfu-common"
                }
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:0.11.0"
            }
        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn kotlin.targets.ios.binaries.getExecutable('test', 'DEBUG').linkTaskName
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getExecutable('test', 'DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

configurations {
    compileClasspath
}